// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack
/**
 *  A library of commonly used mathematical functions.
 *  All functions runs in O(n), where n is the number of bits used
 *  for representing a two's complement integer value (16 in the Hack computer). 
 *  Note: Jack compilers implement multiplication and division
 *  using calls to OS functions in this class.
 */
class Math {
    //static int n;             // Number of bits used for representing a two's complement integer
    static Array powersOfTwo; // Stores 2^0, 2^1, 2^2,..., 2^(n-1)

    // Initializes the Math library.
    function void init() {
        let powersOfTwo = Array.new(16);
        let powersOfTwo[0] = 1;
        let powersOfTwo[1] = 2;
        let powersOfTwo[2] = 4;
        let powersOfTwo[3] = 8;
        let powersOfTwo[4] = 16;
        let powersOfTwo[5] = 32;
        let powersOfTwo[6] = 64;
        let powersOfTwo[7] = 128;
        let powersOfTwo[8] = 256;
        let powersOfTwo[9] = 512;
        let powersOfTwo[10] = 1024;
        let powersOfTwo[11] = 2048;
        let powersOfTwo[12] = 4096;
        let powersOfTwo[13] = 8192;
        let powersOfTwo[14] = 16384;
        let powersOfTwo[15] = 16384 + 16384;
        return;
    }

    // bit helper function 
    function boolean bit(int x, int i){
        return ~((x & powersOfTwo[i]) = 0);
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*'
     *  in an expression, it handles it by invoking this method. 
     *  Thus, in Jack, x * y and Math.multiply(x,y) return the same value. */
    function int multiply(int x, int y) {
        var int xShifted,sum,bitPosition;

        let sum = 0;
        let xShifted = x;
        let bitPosition = 0;

        while(bitPosition < 16){
            if(Math.bit(y,bitPosition)){
                let sum = sum + xShifted;
            }

            let xShifted = xShifted + xShifted;
            let bitPosition = bitPosition + 1;
        }

        return sum;
    }

    /** Returns the integer part of x / y.
     *  When a Jack compiler detects the division operator '/'
     *  an an expression, it handles it by invoking this method.
     *  Thus, x/y and Math.divide(x,y) return the same value. */
    function int divide(int x, int y) {
        var int answer, temp_answer;
        var boolean sign;

        let sign = ((x<0)=(y<0));
        let x = Math.abs(x);
        let y = Math.abs(y);

        if(y>x){
            return 0;
        }

        let temp_answer = Math.divide(x,2*y);

        if((x - (2 * temp_answer * y)) < y){
            let answer = 2 * temp_answer;
        }
        else{
            let answer = (2 * temp_answer) + 1;
        }
        
        if(sign){
            return answer;
        }
        else{
            return -answer;
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, j, temp, tempSq;
        
        let y = 0; 
        //let j = Math.divide(n,2) - 1;
        let j = 7;
        while(~(j<0)){
            let temp = y + powersOfTwo[j];
            let tempSq = temp * temp;

            if(~(tempSq>x) & (tempSq>0)){
                let y = temp;
            }

            let  j = j - 1;
        }

        return y;
    }

    /** Returns the greater value. */
    function int max(int a, int b) {
        if(a>b){
            return a;   
        }
        return b;
    }

    /** Returns the smaller value. */
    function int min(int a, int b) {
        if(a<b){
            return a;
        }
        return b;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if(x<0){
            let x = -x;
        }
        return x;
    }
}
