// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack
/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean isWhite;
    static Array powersOfTwo;
    static int start_position, end_position;

    /** Initializes the Screen. */
    function void init() {

        let isWhite = false;
        let start_position = 16384;
        let end_position =  24576;

        let powersOfTwo = Array.new(16);
        let powersOfTwo[0] = 1;
        let powersOfTwo[1] = 2;
        let powersOfTwo[2] = 4;
        let powersOfTwo[3] = 8;
        let powersOfTwo[4] = 16;
        let powersOfTwo[5] = 32;
        let powersOfTwo[6] = 64;
        let powersOfTwo[7] = 128;
        let powersOfTwo[8] = 256;
        let powersOfTwo[9] = 512;
        let powersOfTwo[10] = 1024;
        let powersOfTwo[11] = 2048;
        let powersOfTwo[12] = 4096;
        let powersOfTwo[13] = 8192;
        let powersOfTwo[14] = 16384;
        let powersOfTwo[15] = 16384 + 16384;
        return;

    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int word_index;

        let word_index = start_position;
        while(word_index < end_position){
            do Memory.poke(word_index,0);
            let word_index = word_index + 1;
        }

        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let isWhite = ~(b);
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int pixel_address, word_value;

        let pixel_address = start_position + (32 * y) + (x / 16);
        let word_value = Memory.peek(pixel_address);

        if(isWhite){
            let word_value = word_value & ~(powersOfTwo[x & 15]);
        }
        else{
            let word_value = word_value | powersOfTwo[x & 15];
        }

        do Memory.poke(pixel_address, word_value);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy;  

        let dx = x2-x1;
        let dy = y2-y1;

        if((dx=0) & (dy=0)){
            do Screen.drawPixel(x1,y2);
            return;
        }

        // verticle line
        if(dx=0){
            if(dy<0){
                do Screen.draw_VerticleLine(x1,y2,y1);
                return;
            }

            do Screen.draw_VerticleLine(x1,y1,y2);
            return;
        }


        // horizontal line
        if(dy=0){
            if(dx<0){
                do Screen.draw_horizontalLine(x2,x1,y1);
                return;
            }

            do Screen.draw_horizontalLine(x1,x2,y1);
            return;
        }

        // diagonal
        if(dx<0){
            do Screen.draw_diagonalLine(x2,y2,x1,y1);
        }
        else{
            do Screen.draw_diagonalLine(x1,y1,x2,y2);
        }

        return;
    }


    // draw diagonal line
    function void draw_diagonalLine(int x1, int y1, int x2, int y2) {
        var int a, b, diff, dx, dy; 

        let a = 0;
        let b = 0;
        let diff = 0;
        let dx = x2 - x1;
        let dy = y2 - y1;

        if(dy > 0){
            while (~(a > dx) & ~(b > dy)) {
                do Screen.drawPixel(x1 + a, y1 + b);

                if (diff > 0) {
                    let b = b + 1;
                    let diff = diff - dx;
                } else {
                    let a = a + 1;
                    let diff = diff + dy;
                }
            }
        }
        else{
            while (~(a > dx) & ~(b < dy)) {
                do Screen.drawPixel(x1 + a, y1 + b);

                if (diff > 0) {
                    let a = a + 1;
                    let diff = diff + dy;
                } else {
                    let b = b - 1;
                    let diff = diff + dx;
                }
            }
        }

        return;
    }

    //draw horizontal line
    function void draw_horizontalLine(int x1, int x2, int y){
        while(~(x2 < x1)){
            do Screen.drawPixel(x1,y);
            let x1 = x1 + 1;
        }

        return;
    }

    //draw vertical line
    function void draw_VerticleLine(int x, int y1, int y2){
        while(~(y2 < y1)){
            do Screen.drawPixel(x,y1);
            let y1 = y1 + 1;
        }

        return;
    }


    /** Draws a filled rectangle whose top left corner is (x1, y1)
     *  and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        while(~(y1>y2)){
            do Screen.drawLine(x1,y1,x2,y1);
            let y1 = y1 + 1;
        }

        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dx, dy;

        let dy = -r;
        while(~(dy>r)){
            let dx = Math.sqrt((r * r) - (dy * dy));
            do Screen.drawLine(x-dx, y+dy, x+dx, y+dy);

            let dy = dy + 1;
        }

        return;
    }
}
